{"version":3,"file":"index.esm.js","sources":["../src/HistoryContext.tsx","../src/SuspensePendingContext.tsx","../src/BrowserRouter.tsx","../src/RouteDataContext.ts","../src/RouteWrapper.tsx","../src/Routes.tsx","../src/types.ts","../src/LazyFetcher.ts"],"sourcesContent":["import React, { createContext, useContext } from 'react';\n\nimport { History } from './types';\n\nconst HistoryContext = createContext<History | null>(null);\n\ntype Props = {\n  history: History;\n};\n\nexport const HistoryProvider: React.FC<Props> = ({\n  history,\n  children,\n}) => (\n  <HistoryContext.Provider value={history}>\n    {children}\n  </HistoryContext.Provider>\n);\n\nexport const useHistory = () => {\n  const history = useContext(HistoryContext);\n  if (!history) throw new Error('missing <HistoryContext>');\n  return history;\n};\n","import React, { createContext, useContext } from 'react';\n\nconst SuspensePendingContext = createContext(false);\n\ntype Props = {\n  suspensePending: boolean;\n};\n\nexport const SuspensePendingProvider: React.FC<Props> = ({\n  suspensePending,\n  children,\n}) => (\n  <SuspensePendingContext.Provider value={suspensePending}>\n    {children}\n  </SuspensePendingContext.Provider>\n);\n\nexport const useSuspensePending = () => useContext(SuspensePendingContext);\n","// eslint-disable-next-line spaced-comment\n/// <reference types=\"react/experimental\" />\n\nimport React, {\n  TransitionStartFunction,\n  useRef,\n  useTransition,\n} from 'react';\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nimport { Router } from 'react-router';\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nimport { createBrowserHistory } from 'history';\n\nimport { History, HistoryEvent } from './types';\nimport { HistoryProvider } from './HistoryContext';\nimport { SuspensePendingProvider } from './SuspensePendingContext';\n\ntype Props = {\n  timeout?: number;\n  window?: unknown;\n};\n\nconst wrapHistory = (startTransiton: TransitionStartFunction) => (history: History) => {\n  const listen = (listener: (e: HistoryEvent) => void) => {\n    const unlisten = history.listen((e: HistoryEvent) => {\n      startTransiton(() => {\n        listener(e);\n      });\n    });\n    return unlisten;\n  };\n  return { ...history, listen };\n};\n\nexport const BrowserRouter: React.FC<Props> = ({\n  timeout,\n  window,\n  children,\n}) => {\n  const [startTransiton, isPending] = useTransition(timeout ? { timeoutMs: timeout } : null);\n  const history = useRef<History>();\n  if (!history.current) {\n    history.current = wrapHistory(startTransiton)(createBrowserHistory({ window }));\n  }\n  return (\n    <HistoryProvider history={history.current}>\n      <SuspensePendingProvider suspensePending={isPending}>\n        <Router history={history.current} timeout={timeout}>\n          {children}\n        </Router>\n      </SuspensePendingProvider>\n    </HistoryProvider>\n  );\n};\n\nexport default BrowserRouter;\n","import { createContainer } from 'react-tracked';\n\nconst passDataProp = ({ data }: { data: object | null }) => [\n  // Because Suspendable by react-suspense-fetch is a mutable object,\n  // we need to wrap it here. Othrewise, state usage tracking\n  // by react-tracked doesn't work.\n  // XXX we now have triple Proxies. It should be improved.\n  data && new Proxy(data, {}),\n  null, // we don't use useUpdate\n] as const;\n\nexport const {\n  Provider: RouteDataProvider,\n  useTrackedState: useRouteData,\n  useSelector: useRouteDataSelector,\n} = createContainer(passDataProp);\n","import React, { useState, useEffect } from 'react';\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nimport { matchRoutes } from 'react-router';\n\nimport { RouteDataProvider } from './RouteDataContext';\nimport { match as Match, History, HistoryEvent } from './types';\n\nconst INITIALIZED_MAP = Symbol('INITIALIZED_MAP');\n\n// HACK\nconst getInitializedMap = (history: History) => {\n  const hackedHistory = history as {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [INITIALIZED_MAP]?: Map<any, any>;\n  };\n  let initializedMap = hackedHistory[INITIALIZED_MAP];\n  if (!initializedMap) {\n    initializedMap = new Map();\n    hackedHistory[INITIALIZED_MAP] = initializedMap;\n  }\n  return initializedMap;\n};\n\ntype FetchData = (m: Match) => object;\n\n// we somehow need global cache\n// HACK it there any better way???\nconst getInitialRouteData = (\n  history: History,\n  fetchData: FetchData,\n  path: string,\n  basename: string,\n  caseSensitive: boolean,\n  match: Match,\n) => {\n  const initializedMap = getInitializedMap(history);\n  const key = JSON.stringify({\n    path,\n    basename,\n    caseSensitive,\n    match,\n  }); // HACK\n  if (!initializedMap.has(key)) {\n    initializedMap.set(\n      key,\n      match ? fetchData(match) : null,\n    );\n    // FIXME no cleanup\n  }\n  return initializedMap.get(key) as object | null;\n};\n\ntype Props = {\n  history: History;\n  routePath: string;\n  basename: string;\n  caseSensitive: boolean;\n  fetchData: FetchData;\n  match: Match;\n};\n\nexport const RouteWrapper: React.FC<Props> = ({\n  history,\n  routePath,\n  basename,\n  caseSensitive,\n  fetchData,\n  match,\n  children,\n}) => {\n  const [routeDataState, setRouteData] = useState<object | null>(null);\n  const routeData = (routeDataState === null ? getInitialRouteData(\n    history,\n    fetchData,\n    routePath,\n    basename,\n    caseSensitive,\n    match,\n  ) : routeDataState);\n  useEffect(() => {\n    const unlisten = history.listen(({ location }: HistoryEvent) => {\n      const matches = matchRoutes([{ path: routePath }], location, basename, caseSensitive);\n      if (matches && matches.length) {\n        // TODO we do not have parentParams here\n        const m: Match = {\n          params: matches[0].params,\n          pathname: matches[0].pathname,\n        };\n        setRouteData(fetchData(m));\n      }\n    });\n    // FIXME route could be change before this effect is handled?\n    return unlisten;\n  }, [history, routePath, basename, caseSensitive, fetchData]);\n  return (\n    <RouteDataProvider data={routeData}>\n      {children}\n    </RouteDataProvider>\n  );\n};\n\nexport default RouteWrapper;\n","import React, { createElement, useMemo } from 'react';\nimport {\n  useParams,\n  useResolvedLocation,\n  createRoutesFromChildren,\n  useRoutes as useRoutesOrig,\n  useLocation,\n  matchRoutes,\n  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n  // @ts-ignore\n} from 'react-router';\n\nimport { Route, match as Match, hasRouteElement } from './types';\nimport { RouteWrapper } from './RouteWrapper';\nimport { useHistory } from './HistoryContext';\n\n// HACK because RouteContext is not exported.\nconst EMPTY_PATHNAME = { pathname: null };\nconst usePathname = () => useResolvedLocation(EMPTY_PATHNAME).pathname;\n\nexport const useRoutes = (\n  routesOrig: Route[],\n  basenameOrig = '',\n  caseSensitive = false,\n) => {\n  const history = useHistory();\n  const location = useLocation();\n  const parentPathname = usePathname();\n  const parentParams = useParams();\n\n  const basename = basenameOrig\n    ? `${parentPathname}/${basenameOrig}`.replace(/\\/\\/+/g, '/')\n    : parentPathname;\n\n  const matches = useMemo(\n    () => matchRoutes(routesOrig, location, basename, caseSensitive),\n    [routesOrig, location, basename, caseSensitive],\n  );\n\n  const routes = [...routesOrig];\n  (matches || []).forEach((match: Match & { route?: Route }) => {\n    if (!match.route) return;\n    const routeIndex = routes.indexOf(match.route);\n    if (routeIndex === -1) return;\n    const route = routes[routeIndex];\n    if (!hasRouteElement(route)) return;\n    const { fetchData } = route.element.props;\n    if (!fetchData) return;\n    const params = { ...parentParams, ...match.params };\n    const element = createElement(RouteWrapper, {\n      history,\n      routePath: route.path,\n      basename,\n      caseSensitive,\n      fetchData,\n      match: { params, pathname: match.pathname },\n    }, route.element);\n    routes[routeIndex] = { ...route, element };\n  });\n\n  return useRoutesOrig(routes, basenameOrig, caseSensitive);\n};\n\ntype Props = {\n  basename?: string;\n  caseSensitive?: boolean;\n};\n\nexport const Routes: React.FC<Props> = ({\n  basename = '',\n  caseSensitive = false,\n  children,\n}) => {\n  const routes = createRoutesFromChildren(children);\n  return useRoutes(routes, basename, caseSensitive);\n};\n","import { ReactElement, ReactNode } from 'react';\n\ntype RouteWithElement = {\n  path: string;\n  element: ReactElement;\n  children: ReactNode;\n};\n\ntype RouteWithRedirectTo = {\n  path: string;\n  redirectTo: string;\n};\n\nexport type Route = RouteWithElement | RouteWithRedirectTo;\n\nexport const hasRouteElement = (route: Route): route is RouteWithElement => (\n  !!(route as RouteWithElement).element\n);\n\nexport type match<Params extends { [K in keyof Params]?: string } = {}> = {\n  params: Params;\n  pathname: string;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type History = any;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type HistoryEvent = any;\n","import { prepare, run, prefetch } from 'react-suspense-fetch';\n\nimport { match as Match } from './types';\n\nexport const LazyFetcher = <T extends object, P>(\n  factory: () => Promise<{ default: (m: Match<P>) => Promise<T> }>,\n) => {\n  const preparedFetcher = prepare(factory);\n  const invokeFetcher = async (\n    [fetcher, match]: readonly [(m: Match<P>) => Promise<T>, Match<P>],\n  ) => fetcher(match);\n  return (match: Match<P>) => {\n    run(preparedFetcher, null);\n    return prefetch(\n      invokeFetcher,\n      [preparedFetcher, match] as const,\n      (source) => [\n        source[0].default, // can suspend\n        source[1],\n      ] as const,\n    );\n  };\n};\n\nexport default LazyFetcher;\n"],"names":["HistoryContext","createContext","HistoryProvider","React","Provider","value","history","children","SuspensePendingContext","SuspensePendingProvider","suspensePending","useSuspensePending","useContext","BrowserRouter","timeout","window","useTransition","timeoutMs","startTransiton","isPending","useRef","current","listen","listener","e","wrapHistory","createBrowserHistory","Router","createContainer","data","Proxy","RouteDataProvider","useRouteData","useTrackedState","useRouteDataSelector","useSelector","INITIALIZED_MAP","Symbol","RouteWrapper","routePath","basename","caseSensitive","fetchData","match","useState","routeDataState","setRouteData","routeData","path","initializedMap","hackedHistory","Map","getInitializedMap","key","JSON","stringify","has","set","get","getInitialRouteData","useEffect","matches","matchRoutes","location","length","params","pathname","EMPTY_PATHNAME","useRoutes","routesOrig","basenameOrig","Error","useHistory","useLocation","parentPathname","useResolvedLocation","parentParams","useParams","replace","useMemo","routes","forEach","route","routeIndex","indexOf","element","hasRouteElement","props","createElement","useRoutesOrig","Routes","createRoutesFromChildren","LazyFetcher","factory","preparedFetcher","prepare","invokeFetcher","fetcher","run","prefetch","source"],"mappings":"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"}