{"version":3,"file":"index.esm.js","sources":["../src/HistoryContext.tsx","../src/SuspensePendingContext.tsx","../src/BrowserRouter.tsx","../src/types.ts","../src/RouteDataContext.ts","../src/Routes.tsx","../src/LazyFetcher.ts"],"sourcesContent":["import React, { createContext, useContext } from 'react';\n\nimport { History } from './types';\n\nconst HistoryContext = createContext<History | null>(null);\n\ntype Props = {\n  history: History;\n};\n\nexport const HistoryProvider: React.FC<Props> = ({\n  history,\n  children,\n}) => (\n  <HistoryContext.Provider value={history}>\n    {children}\n  </HistoryContext.Provider>\n);\n\nexport const useHistory = () => {\n  const history = useContext(HistoryContext);\n  if (!history) throw new Error('missing <HistoryContext>');\n  return history;\n};\n","import React, { createContext, useContext } from 'react';\n\nconst SuspensePendingContext = createContext(false);\n\ntype Props = {\n  suspensePending: boolean;\n};\n\nexport const SuspensePendingProvider: React.FC<Props> = ({\n  suspensePending,\n  children,\n}) => (\n  <SuspensePendingContext.Provider value={suspensePending}>\n    {children}\n  </SuspensePendingContext.Provider>\n);\n\nexport const useSuspensePending = () => useContext(SuspensePendingContext);\n","// eslint-disable-next-line spaced-comment\n/// <reference types=\"react/experimental\" />\n\nimport React, {\n  TransitionStartFunction,\n  useRef,\n  useTransition,\n} from 'react';\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nimport { Router } from 'react-router';\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nimport { createBrowserHistory } from 'history';\n\nimport { History, HistoryEvent } from './types';\nimport { HistoryProvider } from './HistoryContext';\nimport { SuspensePendingProvider } from './SuspensePendingContext';\n\ntype Props = {\n  timeout?: number;\n  window?: unknown;\n};\n\nconst wrapHistory = (startTransiton: TransitionStartFunction) => (history: History) => {\n  const listen = (listener: (e: HistoryEvent) => void) => {\n    const unlisten = history.listen((e: HistoryEvent) => {\n      startTransiton(() => {\n        listener(e);\n      });\n    });\n    return unlisten;\n  };\n  return { ...history, listen };\n};\n\nexport const BrowserRouter: React.FC<Props> = ({\n  timeout,\n  window,\n  children,\n}) => {\n  const [startTransiton, isPending] = useTransition(timeout ? { timeoutMs: timeout } : null);\n  const history = useRef<History>();\n  if (!history.current) {\n    history.current = wrapHistory(startTransiton)(createBrowserHistory({ window }));\n  }\n  return (\n    <HistoryProvider history={history.current}>\n      <SuspensePendingProvider suspensePending={isPending}>\n        <Router history={history.current} timeout={timeout}>\n          {children}\n        </Router>\n      </SuspensePendingProvider>\n    </HistoryProvider>\n  );\n};\n\nexport default BrowserRouter;\n","import { ReactElement, ReactNode } from 'react';\n\ntype RouteWithElement = {\n  path: string;\n  element: ReactElement;\n  children: ReactNode;\n};\n\ntype RouteWithRedirectTo = {\n  path: string;\n  redirectTo: string;\n};\n\nexport type Route = RouteWithElement | RouteWithRedirectTo;\n\nexport const hasRouteElement = (route: Route): route is RouteWithElement => (\n  !!(route as RouteWithElement).element\n);\n\nexport type match<Params extends { [K in keyof Params]?: string } = {}> = {\n  params: Params;\n  pathname: string;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type History = any;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type HistoryEvent = any;\n","/* eslint camelcase: off */\n/* eslint @typescript-eslint/camelcase: off */\n\nimport { createContainer } from 'react-tracked';\n\nconst passDataProp = ({ data }: { data: object }) => [\n  data,\n  null, // we don't use useUpdate\n] as const;\n\nconst {\n  Provider,\n  useTrackedState,\n  useSelector,\n} = createContainer(passDataProp);\n\nexport const RouteDataProvider = Provider;\n\ntype UseTrackedState = <State>(opts: {\n  unstable_ignoreStateEquality?: boolean;\n}) => State;\n\nexport const useRouteData = () => (useTrackedState as UseTrackedState)({\n  // Because Suspendable by react-suspense-fetch is a mutable object,\n  // we need this special mode to handle it.\n  unstable_ignoreStateEquality: true,\n});\n\nexport const useRouteDataSelector = useSelector;\n","/* eslint react/no-children-prop: off */\n\nimport React, {\n  useEffect,\n  useState,\n  useMemo,\n  useRef,\n} from 'react';\nimport {\n  useParams,\n  useResolvedLocation,\n  createRoutesFromChildren,\n  useRoutes as useRoutesOrig,\n  useLocation,\n  matchRoutes,\n  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n  // @ts-ignore\n} from 'react-router';\n\nimport {\n  Route,\n  hasRouteElement,\n  match as Match,\n  HistoryEvent,\n} from './types';\nimport { useHistory } from './HistoryContext';\nimport { RouteDataProvider } from './RouteDataContext';\n\n// HACK because RouteContext is not exported.\nconst EMPTY_PATHNAME = { pathname: null };\nconst usePathname = () => useResolvedLocation(EMPTY_PATHNAME).pathname;\n\nexport const useRoutes = (\n  routesOrig: Route[],\n  basenameOrig = '',\n  caseSensitive = false,\n) => {\n  const history = useHistory();\n  const parentPathname = usePathname();\n  const parentParams = useParams();\n  const initialLocation = useRef(useLocation());\n\n  const basename = basenameOrig\n    ? `${parentPathname}/${basenameOrig}`.replace(/\\/\\/+/g, '/')\n    : parentPathname;\n\n  const [routeDataMap, setRouteDataMap] = useState<{ [path: string]: object }>({});\n\n  useEffect(() => {\n    const callback = ({ location }: HistoryEvent) => {\n      const matches = matchRoutes(\n        routesOrig,\n        location,\n        basename,\n        caseSensitive,\n      );\n      (matches || []).forEach((match: Match & { route?: Route }) => {\n        const { params, pathname, route } = match;\n        if (!route || !hasRouteElement(route)) return;\n        const { fetchData } = route.element.props;\n        if (!fetchData) return;\n        const m: Match = {\n          params: { ...parentParams, ...params },\n          pathname,\n        };\n        const routeData = fetchData(m);\n        setRouteDataMap((prev) => ({ ...prev, [route.path]: routeData }));\n      });\n    };\n    const unlisten = history.listen(callback);\n    callback({ location: initialLocation.current });\n    return unlisten;\n  }, [history, routesOrig, basename, caseSensitive, parentParams]);\n\n  const routes = routesOrig.map((route) => {\n    if (!hasRouteElement(route)) return route;\n    const { fetchData } = route.element.props;\n    if (!fetchData) return route;\n    const routeData = routeDataMap[route.path] as object | undefined;\n    return {\n      ...route,\n      element: routeData && (\n        <RouteDataProvider data={routeData} children={route.element} />\n      ),\n    };\n  });\n\n  return useRoutesOrig(routes, basenameOrig, caseSensitive);\n};\n\ntype Props = {\n  basename?: string;\n  caseSensitive?: boolean;\n};\n\nexport const Routes: React.FC<Props> = ({\n  basename = '',\n  caseSensitive = false,\n  children,\n}) => {\n  const routes = useMemo(\n    () => createRoutesFromChildren(children),\n    [children],\n  );\n  return useRoutes(routes, basename, caseSensitive);\n};\n","import { prepare, run, prefetch } from 'react-suspense-fetch';\n\nimport { match as Match } from './types';\n\nexport const LazyFetcher = <T extends object, P>(\n  factory: () => Promise<{ default: (m: Match<P>) => Promise<T> }>,\n) => {\n  const preparedFetcher = prepare(factory);\n  const invokeFetcher = async (\n    [fetcher, match]: readonly [(m: Match<P>) => Promise<T>, Match<P>],\n  ) => fetcher(match);\n  return (match: Match<P>) => {\n    run(preparedFetcher, null);\n    return prefetch(\n      invokeFetcher,\n      [preparedFetcher, match] as const,\n      (source) => [\n        source[0].default, // can suspend\n        source[1],\n      ] as const,\n    );\n  };\n};\n\nexport default LazyFetcher;\n"],"names":["HistoryContext","createContext","HistoryProvider","React","Provider","value","history","children","SuspensePendingContext","SuspensePendingProvider","suspensePending","useSuspensePending","useContext","BrowserRouter","timeout","window","useTransition","timeoutMs","startTransiton","isPending","useRef","current","listen","listener","e","wrapHistory","createBrowserHistory","Router","hasRouteElement","route","element","createContainer","data","useTrackedState","RouteDataProvider","useRouteData","unstable_ignoreStateEquality","useRouteDataSelector","useSelector","EMPTY_PATHNAME","pathname","useRoutes","routesOrig","basenameOrig","caseSensitive","Error","useHistory","parentPathname","useResolvedLocation","parentParams","useParams","initialLocation","useLocation","basename","replace","useState","routeDataMap","setRouteDataMap","useEffect","callback","matchRoutes","location","forEach","match","params","fetchData","props","routeData","prev","path","unlisten","routes","map","useRoutesOrig","Routes","useMemo","createRoutesFromChildren","LazyFetcher","factory","preparedFetcher","prepare","invokeFetcher","fetcher","run","prefetch","source"],"mappings":"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"}