{"version":3,"file":"index.js","sources":["../src/types.ts","../src/RouteDataContext.ts","../src/Routes.tsx","../src/LazyFetcher.ts"],"sourcesContent":["import { ReactElement, ReactNode } from 'react';\n\ntype RouteWithElement = {\n  path: string;\n  element: ReactElement;\n  children: ReactNode;\n};\n\ntype RouteWithRedirectTo = {\n  path: string;\n  redirectTo: string;\n};\n\nexport type Route = RouteWithElement | RouteWithRedirectTo;\n\nexport const hasRouteElement = (route: Route): route is RouteWithElement => (\n  !!(route as RouteWithElement).element\n);\n\nexport type match<Params extends { [K in keyof Params]?: string } = {}> = {\n  params: Params;\n  pathname: string;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type History = any;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type HistoryEvent = any;\n","/* eslint camelcase: off */\n/* eslint @typescript-eslint/camelcase: off */\n\nimport { createContainer } from 'react-tracked';\n\nconst passDataProp = ({ data }: { data: object }) => [\n  data,\n  null, // we don't use useUpdate\n] as const;\n\nconst {\n  Provider,\n  useTrackedState,\n  useSelector,\n} = createContainer(passDataProp);\n\nexport const RouteDataProvider = Provider;\n\ntype UseTrackedState = <State>(opts: {\n  unstable_ignoreStateEquality?: boolean;\n}) => State;\n\nexport const useRouteData = () => (useTrackedState as UseTrackedState)({\n  // Because Suspendable by react-suspense-fetch is a mutable object,\n  // we need this special mode to handle it.\n  unstable_ignoreStateEquality: true,\n});\n\nexport const useRouteDataSelector = useSelector;\n","/* eslint react/no-children-prop: off */\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport {\n  useParams,\n  useResolvedLocation,\n  createRoutesFromChildren,\n  useRoutes as useRoutesOrig,\n  useLocation,\n  useHistory,\n  useStartTransition,\n  matchRoutes,\n  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n  // @ts-ignore\n} from 'react-router';\n\nimport {\n  Route,\n  hasRouteElement,\n  match as Match,\n  HistoryEvent,\n} from './types';\nimport { RouteDataProvider } from './RouteDataContext';\n\n// HACK because RouteContext is not exported.\nconst EMPTY_PATHNAME = { pathname: null };\nconst usePathname = () => useResolvedLocation(EMPTY_PATHNAME).pathname;\n\nexport const useRoutes = (\n  routesOrig: Route[],\n  basenameOrig = '',\n  caseSensitive = false,\n) => {\n  const history = useHistory();\n  const startTransitionRef = useRef(useStartTransition());\n  const parentPathname = usePathname();\n  const parentParams = useParams();\n  const initialLocation = useRef(useLocation());\n\n  const basename = basenameOrig\n    ? `${parentPathname}/${basenameOrig}`.replace(/\\/\\/+/g, '/')\n    : parentPathname;\n\n  const [routeDataMap, setRouteDataMap] = useState<{ [path: string]: object }>({});\n\n  const ref = useRef<{\n    routesOrig: Route[];\n    basename: string;\n    caseSensitive: boolean;\n    parentParams: { [key: string]: string };\n  }>();\n  useEffect(() => {\n    ref.current = {\n      routesOrig,\n      basename,\n      caseSensitive,\n      parentParams,\n    };\n  });\n\n  useEffect(() => {\n    const callback = (location: HistoryEvent['location']) => {\n      const matches = matchRoutes(\n        ref.current?.routesOrig,\n        location,\n        ref.current?.basename,\n        ref.current?.caseSensitive,\n      );\n      (matches || []).forEach((match: Match & { route?: Route }) => {\n        const { params, pathname, route } = match;\n        if (!route || !hasRouteElement(route)) return;\n        const { fetchData } = route.element.props;\n        if (!fetchData) return;\n        const m: Match = {\n          params: { ...ref.current?.parentParams, ...params },\n          pathname,\n        };\n        const routeData = fetchData(m);\n        setRouteDataMap((prev) => ({ ...prev, [route.path]: routeData }));\n      });\n    };\n    const unlisten = history.listen(({ location }: HistoryEvent) => {\n      startTransitionRef.current(() => {\n        callback(location);\n      });\n    });\n    callback(initialLocation.current);\n    return unlisten;\n  }, [history]);\n\n  const routes = routesOrig.map((route) => {\n    if (!hasRouteElement(route)) return route;\n    const { fetchData } = route.element.props;\n    if (!fetchData) return route;\n    const routeData = routeDataMap[route.path] as object | undefined;\n    return {\n      ...route,\n      element: routeData && (\n        <RouteDataProvider data={routeData} children={route.element} />\n      ),\n    };\n  });\n\n  return useRoutesOrig(routes, basenameOrig, caseSensitive);\n};\n\ntype Props = {\n  basename?: string;\n  caseSensitive?: boolean;\n};\n\nexport const Routes: React.FC<Props> = ({\n  basename = '',\n  caseSensitive = false,\n  children,\n}) => {\n  const routes = createRoutesFromChildren(children);\n  return useRoutes(routes, basename, caseSensitive);\n};\n","import { prepare, run, prefetch } from 'react-suspense-fetch';\n\nimport { match as Match } from './types';\n\nexport const LazyFetcher = <T extends object, P>(\n  factory: () => Promise<{ default: (m: Match<P>) => Promise<T> }>,\n) => {\n  const preparedFetcher = prepare(factory);\n  const invokeFetcher = async (\n    [fetcher, match]: readonly [(m: Match<P>) => Promise<T>, Match<P>],\n  ) => fetcher(match);\n  return (match: Match<P>) => {\n    run(preparedFetcher, null);\n    return prefetch(\n      invokeFetcher,\n      [preparedFetcher, match] as const,\n      (source) => [\n        source[0].default, // can suspend\n        source[1],\n      ] as const,\n    );\n  };\n};\n\nexport default LazyFetcher;\n"],"names":["hasRouteElement","route","element","createContainer","data","useTrackedState","RouteDataProvider","Provider","useRouteDataSelector","useSelector","EMPTY_PATHNAME","pathname","useRoutes","routesOrig","basenameOrig","caseSensitive","history","useHistory","startTransitionRef","useRef","useStartTransition","parentPathname","useResolvedLocation","parentParams","useParams","initialLocation","useLocation","basename","replace","useState","routeDataMap","setRouteDataMap","ref","useEffect","current","callback","location","matchRoutes","_ref$current","_ref$current2","_ref$current3","forEach","match","params","fetchData","props","routeData","_ref$current4","prev","path","unlisten","listen","routes","map","React","children","useRoutesOrig","factory","preparedFetcher","prepare","invokeFetcher","fetcher","run","prefetch","source","createRoutesFromChildren","unstable_ignoreStateEquality"],"mappings":"wZAeaA,EAAkB,SAACC,WAC3BA,EAA2BC,WCF5BC,kBATiB,kBAAgC,GAA7BC,KAEtB,QAKAC,IAAAA,gBAIWC,IALXC,SAiBWC,IAfXC,YCYIC,EAAiB,CAAEC,SAAU,MAGtBC,EAAY,SACvBC,EACAC,EACAC,YADAD,IAAAA,EAAe,aACfC,IAAAA,GAAgB,GAEhB,IAAMC,EAAUC,eACVC,EAAqBC,SAAOC,wBAC5BC,EATkBC,sBAAoBZ,GAAgBC,SAUtDY,EAAeC,cACfC,EAAkBN,SAAOO,iBAEzBC,EAAWb,GACVO,MAAkBP,GAAec,QAAQ,SAAU,KACtDP,IAEoCQ,WAAqC,IAAtEC,OAAcC,OAEfC,EAAMb,WAMZc,YAAU,WACRD,EAAIE,QAAU,CACZrB,WAAAA,EACAc,SAAAA,EACAZ,cAAAA,EACAQ,aAAAA,KAIJU,YAAU,WACR,IAAME,EAAW,SAACC,cACAC,uBACdL,EAAIE,gBAAJI,EAAazB,WACbuB,WACAJ,EAAIE,gBAAJK,EAAaZ,kBACbK,EAAIE,gBAAJM,EAAazB,gBAEH,IAAI0B,QAAQ,SAACC,SACfC,EAA4BD,EAA5BC,OAAQhC,EAAoB+B,EAApB/B,SAAUV,EAAUyC,EAAVzC,MAC1B,GAAKA,GAAUD,EAAgBC,GAA/B,KACQ2C,EAAc3C,EAAMC,QAAQ2C,MAA5BD,UACR,GAAKA,EAAL,CACA,IAIME,EAAYF,EAJD,CACfD,qBAAaX,EAAIE,gBAAJa,EAAaxB,gBAAiBoB,GAC3ChC,SAAAA,IAGFoB,EAAgB,SAACiB,qBAAeA,UAAO/C,EAAMgD,MAAOH,aAGlDI,EAAWlC,EAAQmC,OAAO,gBAAGf,IAAAA,SACjClB,EAAmBgB,QAAQ,WACzBC,EAASC,OAIb,OADAD,EAASV,EAAgBS,SAClBgB,GACN,CAAClC,IAEJ,IAAMoC,EAASvC,EAAWwC,IAAI,SAACpD,GAC7B,IAAKD,EAAgBC,GAAQ,OAAOA,EAEpC,IADsBA,EAAMC,QAAQ2C,MAA5BD,UACQ,OAAO3C,EACvB,IAAM6C,EAAYhB,EAAa7B,EAAMgD,MACrC,YACKhD,GACHC,QAAS4C,GACPQ,gBAAChD,GAAkBF,KAAM0C,EAAWS,SAAUtD,EAAMC,cAK1D,OAAOsD,YAAcJ,EAAQtC,EAAcC,w3ECnGlB,SACzB0C,GAEA,IAAMC,EAAkBC,UAAQF,GAC1BG,kBACHC,OAASnB,kCACPmB,EAAQnB,wCACb,gBAAQA,GAEN,OADAoB,MAAIJ,EAAiB,MACdK,WACLH,EACA,CAACF,EAAiBhB,GAClB,SAACsB,SAAW,CACVA,EAAO,WACPA,EAAO,uBD6FwB,oBACrCrC,SAAAA,aAAW,SACXZ,cAAAA,gBAGMqC,EAASa,6BAFfV,UAGA,OAAO3C,EAAUwC,EAAQzB,EAAUZ,yBD/FT,kBAAOV,EAAoC,CAGrE6D,8BAA8B"}